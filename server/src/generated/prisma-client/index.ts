// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  app: (where?: AppWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  app: (where: AppWhereUniqueInput) => AppPromise;
  apps: (
    args?: {
      where?: AppWhereInput;
      orderBy?: AppOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<App>;
  appsConnection: (
    args?: {
      where?: AppWhereInput;
      orderBy?: AppOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AppConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventPromise;
  events: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Event>;
  eventsConnection: (
    args?: {
      where?: EventWhereInput;
      orderBy?: EventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EventConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionPromise;
  sessions: (
    args?: {
      where?: SessionWhereInput;
      orderBy?: SessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Session>;
  sessionsConnection: (
    args?: {
      where?: SessionWhereInput;
      orderBy?: SessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SessionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApp: (data: AppCreateInput) => AppPromise;
  updateApp: (
    args: { data: AppUpdateInput; where: AppWhereUniqueInput }
  ) => AppPromise;
  updateManyApps: (
    args: { data: AppUpdateManyMutationInput; where?: AppWhereInput }
  ) => BatchPayloadPromise;
  upsertApp: (
    args: {
      where: AppWhereUniqueInput;
      create: AppCreateInput;
      update: AppUpdateInput;
    }
  ) => AppPromise;
  deleteApp: (where: AppWhereUniqueInput) => AppPromise;
  deleteManyApps: (where?: AppWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (
    args: { data: EventUpdateInput; where: EventWhereUniqueInput }
  ) => EventPromise;
  updateManyEvents: (
    args: { data: EventUpdateManyMutationInput; where?: EventWhereInput }
  ) => BatchPayloadPromise;
  upsertEvent: (
    args: {
      where: EventWhereUniqueInput;
      create: EventCreateInput;
      update: EventUpdateInput;
    }
  ) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (
    args: { data: SessionUpdateInput; where: SessionWhereUniqueInput }
  ) => SessionPromise;
  updateManySessions: (
    args: { data: SessionUpdateManyMutationInput; where?: SessionWhereInput }
  ) => BatchPayloadPromise;
  upsertSession: (
    args: {
      where: SessionWhereUniqueInput;
      create: SessionCreateInput;
      update: SessionUpdateInput;
    }
  ) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  app: (
    where?: AppSubscriptionWhereInput
  ) => AppSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstEventTime_ASC"
  | "firstEventTime_DESC"
  | "lastEventTime_ASC"
  | "lastEventTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "referrer_ASC"
  | "referrer_DESC"
  | "utm_ASC"
  | "utm_DESC";

export type AppOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "timestamp_ASC"
  | "timestamp_DESC"
  | "sessionId_ASC"
  | "sessionId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SessionUpdateManyWithoutAppInput {
  create?: SessionCreateWithoutAppInput[] | SessionCreateWithoutAppInput;
  delete?: SessionWhereUniqueInput[] | SessionWhereUniqueInput;
  connect?: SessionWhereUniqueInput[] | SessionWhereUniqueInput;
  set?: SessionWhereUniqueInput[] | SessionWhereUniqueInput;
  disconnect?: SessionWhereUniqueInput[] | SessionWhereUniqueInput;
  update?:
    | SessionUpdateWithWhereUniqueWithoutAppInput[]
    | SessionUpdateWithWhereUniqueWithoutAppInput;
  upsert?:
    | SessionUpsertWithWhereUniqueWithoutAppInput[]
    | SessionUpsertWithWhereUniqueWithoutAppInput;
  deleteMany?: SessionScalarWhereInput[] | SessionScalarWhereInput;
  updateMany?:
    | SessionUpdateManyWithWhereNestedInput[]
    | SessionUpdateManyWithWhereNestedInput;
}

export type AppWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface SessionUpsertWithWhereUniqueWithoutAppInput {
  where: SessionWhereUniqueInput;
  update: SessionUpdateWithoutAppDataInput;
  create: SessionCreateWithoutAppInput;
}

export interface AppWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  sessions_some?: SessionWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: AppWhereInput[] | AppWhereInput;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SessionUpdateManyDataInput {
  firstEventTime?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  referrer?: String;
  utm?: Json;
}

export interface EventUpdateManyMutationInput {
  type?: Int;
  data?: EventUpdatedataInput;
  timestamp?: DateTimeInput;
  sessionId?: String;
}

export interface SessionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstEventTime?: DateTimeInput;
  firstEventTime_not?: DateTimeInput;
  firstEventTime_in?: DateTimeInput[] | DateTimeInput;
  firstEventTime_not_in?: DateTimeInput[] | DateTimeInput;
  firstEventTime_lt?: DateTimeInput;
  firstEventTime_lte?: DateTimeInput;
  firstEventTime_gt?: DateTimeInput;
  firstEventTime_gte?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  lastEventTime_not?: DateTimeInput;
  lastEventTime_in?: DateTimeInput[] | DateTimeInput;
  lastEventTime_not_in?: DateTimeInput[] | DateTimeInput;
  lastEventTime_lt?: DateTimeInput;
  lastEventTime_lte?: DateTimeInput;
  lastEventTime_gt?: DateTimeInput;
  lastEventTime_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  referrer?: String;
  referrer_not?: String;
  referrer_in?: String[] | String;
  referrer_not_in?: String[] | String;
  referrer_lt?: String;
  referrer_lte?: String;
  referrer_gt?: String;
  referrer_gte?: String;
  referrer_contains?: String;
  referrer_not_contains?: String;
  referrer_starts_with?: String;
  referrer_not_starts_with?: String;
  referrer_ends_with?: String;
  referrer_not_ends_with?: String;
  AND?: SessionScalarWhereInput[] | SessionScalarWhereInput;
  OR?: SessionScalarWhereInput[] | SessionScalarWhereInput;
  NOT?: SessionScalarWhereInput[] | SessionScalarWhereInput;
}

export interface EventUpdatedataInput {
  set?: String[] | String;
}

export interface SessionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstEventTime?: DateTimeInput;
  firstEventTime_not?: DateTimeInput;
  firstEventTime_in?: DateTimeInput[] | DateTimeInput;
  firstEventTime_not_in?: DateTimeInput[] | DateTimeInput;
  firstEventTime_lt?: DateTimeInput;
  firstEventTime_lte?: DateTimeInput;
  firstEventTime_gt?: DateTimeInput;
  firstEventTime_gte?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  lastEventTime_not?: DateTimeInput;
  lastEventTime_in?: DateTimeInput[] | DateTimeInput;
  lastEventTime_not_in?: DateTimeInput[] | DateTimeInput;
  lastEventTime_lt?: DateTimeInput;
  lastEventTime_lte?: DateTimeInput;
  lastEventTime_gt?: DateTimeInput;
  lastEventTime_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  app?: AppWhereInput;
  referrer?: String;
  referrer_not?: String;
  referrer_in?: String[] | String;
  referrer_not_in?: String[] | String;
  referrer_lt?: String;
  referrer_lte?: String;
  referrer_gt?: String;
  referrer_gte?: String;
  referrer_contains?: String;
  referrer_not_contains?: String;
  referrer_starts_with?: String;
  referrer_not_starts_with?: String;
  referrer_ends_with?: String;
  referrer_not_ends_with?: String;
  AND?: SessionWhereInput[] | SessionWhereInput;
}

export interface EventUpdateInput {
  type?: Int;
  data?: EventUpdatedataInput;
  timestamp?: DateTimeInput;
  sessionId?: String;
}

export interface AppSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppWhereInput;
  AND?: AppSubscriptionWhereInput[] | AppSubscriptionWhereInput;
}

export interface AppUpsertWithoutSessionsInput {
  update: AppUpdateWithoutSessionsDataInput;
  create: AppCreateWithoutSessionsInput;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AppCreateInput {
  name: String;
  sessions?: SessionCreateManyWithoutAppInput;
}

export interface EventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  timestamp?: DateTimeInput;
  timestamp_not?: DateTimeInput;
  timestamp_in?: DateTimeInput[] | DateTimeInput;
  timestamp_not_in?: DateTimeInput[] | DateTimeInput;
  timestamp_lt?: DateTimeInput;
  timestamp_lte?: DateTimeInput;
  timestamp_gt?: DateTimeInput;
  timestamp_gte?: DateTimeInput;
  sessionId?: String;
  sessionId_not?: String;
  sessionId_in?: String[] | String;
  sessionId_not_in?: String[] | String;
  sessionId_lt?: String;
  sessionId_lte?: String;
  sessionId_gt?: String;
  sessionId_gte?: String;
  sessionId_contains?: String;
  sessionId_not_contains?: String;
  sessionId_starts_with?: String;
  sessionId_not_starts_with?: String;
  sessionId_ends_with?: String;
  sessionId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: EventWhereInput[] | EventWhereInput;
}

export interface SessionCreateManyWithoutAppInput {
  create?: SessionCreateWithoutAppInput[] | SessionCreateWithoutAppInput;
  connect?: SessionWhereUniqueInput[] | SessionWhereUniqueInput;
}

export interface AppCreateWithoutSessionsInput {
  name: String;
}

export interface SessionCreateWithoutAppInput {
  firstEventTime?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  referrer?: String;
  utm?: Json;
}

export interface SessionCreateInput {
  firstEventTime?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  app?: AppCreateOneWithoutSessionsInput;
  referrer?: String;
  utm?: Json;
}

export interface AppUpdateInput {
  name?: String;
  sessions?: SessionUpdateManyWithoutAppInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventWhereInput;
  AND?: EventSubscriptionWhereInput[] | EventSubscriptionWhereInput;
}

export interface EventCreatedataInput {
  set?: String[] | String;
}

export interface AppUpdateWithoutSessionsDataInput {
  name?: String;
}

export interface SessionUpdateWithWhereUniqueWithoutAppInput {
  where: SessionWhereUniqueInput;
  data: SessionUpdateWithoutAppDataInput;
}

export interface SessionUpdateInput {
  firstEventTime?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  app?: AppUpdateOneWithoutSessionsInput;
  referrer?: String;
  utm?: Json;
}

export interface SessionUpdateManyWithWhereNestedInput {
  where: SessionScalarWhereInput;
  data: SessionUpdateManyDataInput;
}

export interface AppUpdateManyMutationInput {
  name?: String;
}

export interface EventCreateInput {
  type: Int;
  data?: EventCreatedataInput;
  timestamp: DateTimeInput;
  sessionId: String;
}

export interface SessionUpdateWithoutAppDataInput {
  firstEventTime?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  referrer?: String;
  utm?: Json;
}

export interface AppCreateOneWithoutSessionsInput {
  create?: AppCreateWithoutSessionsInput;
  connect?: AppWhereUniqueInput;
}

export interface AppUpdateOneWithoutSessionsInput {
  create?: AppCreateWithoutSessionsInput;
  update?: AppUpdateWithoutSessionsDataInput;
  upsert?: AppUpsertWithoutSessionsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AppWhereUniqueInput;
}

export interface SessionUpdateManyMutationInput {
  firstEventTime?: DateTimeInput;
  lastEventTime?: DateTimeInput;
  referrer?: String;
  utm?: Json;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SessionWhereInput;
  AND?: SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SessionPreviousValues {
  id: ID_Output;
  firstEventTime?: DateTimeOutput;
  lastEventTime?: DateTimeOutput;
  createdAt: DateTimeOutput;
  referrer?: String;
  utm?: Json;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstEventTime: () => Promise<DateTimeOutput>;
  lastEventTime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  referrer: () => Promise<String>;
  utm: () => Promise<Json>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstEventTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastEventTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  referrer: () => Promise<AsyncIterator<String>>;
  utm: () => Promise<AsyncIterator<Json>>;
}

export interface AggregateApp {
  count: Int;
}

export interface AggregateAppPromise
  extends Promise<AggregateApp>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppSubscription
  extends Promise<AsyncIterator<AggregateApp>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Session {
  id: ID_Output;
  firstEventTime?: DateTimeOutput;
  lastEventTime?: DateTimeOutput;
  createdAt: DateTimeOutput;
  referrer?: String;
  utm?: Json;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstEventTime: () => Promise<DateTimeOutput>;
  lastEventTime: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  app: <T = AppPromise>() => T;
  referrer: () => Promise<String>;
  utm: () => Promise<Json>;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstEventTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastEventTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  app: <T = AppSubscription>() => T;
  referrer: () => Promise<AsyncIterator<String>>;
  utm: () => Promise<AsyncIterator<Json>>;
}

export interface App {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
}

export interface AppPromise extends Promise<App>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  sessions: <T = FragmentableArray<Session>>(
    args?: {
      where?: SessionWhereInput;
      orderBy?: SessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AppSubscription
  extends Promise<AsyncIterator<App>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  sessions: <T = Promise<AsyncIterator<SessionSubscription>>>(
    args?: {
      where?: SessionWhereInput;
      orderBy?: SessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AppPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
}

export interface AppPreviousValuesPromise
  extends Promise<AppPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AppPreviousValuesSubscription
  extends Promise<AsyncIterator<AppPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Event {
  id: ID_Output;
  type: Int;
  data: String[];
  timestamp: DateTimeOutput;
  sessionId: String;
  createdAt: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  data: () => Promise<String[]>;
  timestamp: () => Promise<DateTimeOutput>;
  sessionId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  data: () => Promise<AsyncIterator<String[]>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  sessionId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AppEdge {
  node: App;
  cursor: String;
}

export interface AppEdgePromise extends Promise<AppEdge>, Fragmentable {
  node: <T = AppPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppEdgeSubscription
  extends Promise<AsyncIterator<AppEdge>>,
    Fragmentable {
  node: <T = AppSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  type: Int;
  data: String[];
  timestamp: DateTimeOutput;
  sessionId: String;
  createdAt: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  data: () => Promise<String[]>;
  timestamp: () => Promise<DateTimeOutput>;
  sessionId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  data: () => Promise<AsyncIterator<String[]>>;
  timestamp: () => Promise<AsyncIterator<DateTimeOutput>>;
  sessionId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AppSubscriptionPayload {
  mutation: MutationType;
  node: App;
  updatedFields: String[];
  previousValues: AppPreviousValues;
}

export interface AppSubscriptionPayloadPromise
  extends Promise<AppSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppPreviousValuesPromise>() => T;
}

export interface AppSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppPreviousValuesSubscription>() => T;
}

export interface AppConnection {
  pageInfo: PageInfo;
  edges: AppEdge[];
}

export interface AppConnectionPromise
  extends Promise<AppConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppEdge>>() => T;
  aggregate: <T = AggregateAppPromise>() => T;
}

export interface AppConnectionSubscription
  extends Promise<AsyncIterator<AppConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Json = any;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "App",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
