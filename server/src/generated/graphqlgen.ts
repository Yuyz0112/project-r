// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { App, Session } from './prisma-client';
import { EventWithStringData } from '../model';
import { Context } from '../context';

export type SessionOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'firstEventTime_ASC'
  | 'firstEventTime_DESC'
  | 'lastEventTime_ASC'
  | 'lastEventTime_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'referrer_ASC'
  | 'referrer_DESC'
  | 'utm_ASC'
  | 'utm_DESC';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsEvents {
    sessionId: string;
  }

  export type AppsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => App[] | Promise<App[]>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => App[] | Promise<App[]>;
      };

  export type EventsResolver =
    | ((
        parent: undefined,
        args: ArgsEvents,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => EventWithStringData[] | Promise<EventWithStringData[]>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsEvents,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => EventWithStringData[] | Promise<EventWithStringData[]>;
      };

  export interface Type {
    apps:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => App[] | Promise<App[]>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => App[] | Promise<App[]>;
        };

    events:
      | ((
          parent: undefined,
          args: ArgsEvents,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => EventWithStringData[] | Promise<EventWithStringData[]>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsEvents,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => EventWithStringData[] | Promise<EventWithStringData[]>;
        };
  }
}

export namespace AppResolvers {
  export const defaultResolvers = {
    id: (parent: App) => parent.id,
    name: (parent: App) => parent.name,
    createdAt: (parent: App) => parent.createdAt,
  };

  export interface SessionWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    firstEventTime?: string | null;
    firstEventTime_not?: string | null;
    firstEventTime_in?: string[] | null;
    firstEventTime_not_in?: string[] | null;
    firstEventTime_lt?: string | null;
    firstEventTime_lte?: string | null;
    firstEventTime_gt?: string | null;
    firstEventTime_gte?: string | null;
    lastEventTime?: string | null;
    lastEventTime_not?: string | null;
    lastEventTime_in?: string[] | null;
    lastEventTime_not_in?: string[] | null;
    lastEventTime_lt?: string | null;
    lastEventTime_lte?: string | null;
    lastEventTime_gt?: string | null;
    lastEventTime_gte?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    app?: AppWhereInput | null;
    referrer?: string | null;
    referrer_not?: string | null;
    referrer_in?: string[] | null;
    referrer_not_in?: string[] | null;
    referrer_lt?: string | null;
    referrer_lte?: string | null;
    referrer_gt?: string | null;
    referrer_gte?: string | null;
    referrer_contains?: string | null;
    referrer_not_contains?: string | null;
    referrer_starts_with?: string | null;
    referrer_not_starts_with?: string | null;
    referrer_ends_with?: string | null;
    referrer_not_ends_with?: string | null;
    AND?: SessionWhereInput[] | null;
  }
  export interface AppWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    sessions_some?: SessionWhereInput | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    AND?: AppWhereInput[] | null;
  }

  export interface ArgsSessions {
    where?: SessionWhereInput | null;
    orderBy?: SessionOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: App,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: App,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: App,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: App,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type SessionsResolver =
    | ((
        parent: App,
        args: ArgsSessions,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Session[] | null | Promise<Session[] | null>)
    | {
        fragment: string;
        resolver: (
          parent: App,
          args: ArgsSessions,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Session[] | null | Promise<Session[] | null>;
      };

  export type CreatedAtResolver =
    | ((
        parent: App,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: App,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: App,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: App,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: App,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: App,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    sessions:
      | ((
          parent: App,
          args: ArgsSessions,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Session[] | null | Promise<Session[] | null>)
      | {
          fragment: string;
          resolver: (
            parent: App,
            args: ArgsSessions,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Session[] | null | Promise<Session[] | null>;
        };

    createdAt:
      | ((
          parent: App,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: App,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };
  }
}

export namespace SessionResolvers {
  export const defaultResolvers = {
    id: (parent: Session) => parent.id,
    firstEventTime: (parent: Session) =>
      parent.firstEventTime === undefined ? null : parent.firstEventTime,
    lastEventTime: (parent: Session) =>
      parent.lastEventTime === undefined ? null : parent.lastEventTime,
    createdAt: (parent: Session) => parent.createdAt,
    referrer: (parent: Session) =>
      parent.referrer === undefined ? null : parent.referrer,
    utm: (parent: Session) => (parent.utm === undefined ? null : parent.utm),
  };

  export type IdResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type FirstEventTimeResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type LastEventTimeResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type AppResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => App | null | Promise<App | null>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => App | null | Promise<App | null>;
      };

  export type ReferrerResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type UtmResolver =
    | ((
        parent: Session,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolver: (
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    firstEventTime:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    lastEventTime:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    createdAt:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    app:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => App | null | Promise<App | null>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => App | null | Promise<App | null>;
        };

    referrer:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    utm:
      | ((
          parent: Session,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolver: (
            parent: Session,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace EventWithStringDataResolvers {
  export const defaultResolvers = {
    id: (parent: EventWithStringData) => parent.id,
    type: (parent: EventWithStringData) => parent.type,
    data: (parent: EventWithStringData) => parent.data,
    timestamp: (parent: EventWithStringData) => parent.timestamp,
    sessionId: (parent: EventWithStringData) => parent.sessionId,
  };

  export type IdResolver =
    | ((
        parent: EventWithStringData,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type TypeResolver =
    | ((
        parent: EventWithStringData,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolver: (
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>;
      };

  export type DataResolver =
    | ((
        parent: EventWithStringData,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type TimestampResolver =
    | ((
        parent: EventWithStringData,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type SessionIdResolver =
    | ((
        parent: EventWithStringData,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: EventWithStringData,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    type:
      | ((
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolver: (
            parent: EventWithStringData,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => number | Promise<number>;
        };

    data:
      | ((
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: EventWithStringData,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    timestamp:
      | ((
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: EventWithStringData,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    sessionId:
      | ((
          parent: EventWithStringData,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: EventWithStringData,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateApp {
    name: string;
  }

  export type CreateAppResolver =
    | ((
        parent: undefined,
        args: ArgsCreateApp,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => App | null | Promise<App | null>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsCreateApp,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => App | null | Promise<App | null>;
      };

  export interface Type {
    createApp:
      | ((
          parent: undefined,
          args: ArgsCreateApp,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => App | null | Promise<App | null>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsCreateApp,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => App | null | Promise<App | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  App: AppResolvers.Type;
  Session: SessionResolvers.Type;
  EventWithStringData: EventWithStringDataResolvers.Type;
  Mutation: MutationResolvers.Type;
}
