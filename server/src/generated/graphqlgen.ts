// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { Post, User } from './prisma-client';
import { Context } from '../context';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsPost {
    postId: string;
  }

  export interface ArgsPostsByUser {
    userId: string;
  }

  export type PublishedPostsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>;
      };

  export type PostResolver =
    | ((
        parent: undefined,
        args: ArgsPost,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>;
      };

  export type PostsByUserResolver =
    | ((
        parent: undefined,
        args: ArgsPostsByUser,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsPostsByUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>;
      };

  export interface Type {
    publishedPosts:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post[] | Promise<Post[]>;
        };

    post:
      | ((
          parent: undefined,
          args: ArgsPost,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsPost,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | null | Promise<Post | null>;
        };

    postsByUser:
      | ((
          parent: undefined,
          args: ArgsPostsByUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsPostsByUser,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post[] | Promise<Post[]>;
        };
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    title: (parent: Post) => parent.title,
    published: (parent: Post) => parent.published,
  };

  export type IdResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type PublishedResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolver: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>;
      };

  export type AuthorResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolver: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    published:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolver: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => boolean | Promise<boolean>;
        };

    author:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolver: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    name: (parent: User) => parent.name,
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>;
      };

  export type PostsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolver: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | null | Promise<string | null>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => string | Promise<string>;
        };

    posts:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolver: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post[] | Promise<Post[]>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateUser {
    name: string;
  }

  export interface ArgsCreateDraft {
    title: string;
    userId: string;
  }

  export interface ArgsPublish {
    postId: string;
  }

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>;
      };

  export type CreateDraftResolver =
    | ((
        parent: undefined,
        args: ArgsCreateDraft,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>;
      };

  export type PublishResolver =
    | ((
        parent: undefined,
        args: ArgsPublish,
        ctx: Context,
        info: GraphQLResolveInfo,
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolver: (
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>;
      };

  export interface Type {
    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => User | null | Promise<User | null>;
        };

    createDraft:
      | ((
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsCreateDraft,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | null | Promise<Post | null>;
        };

    publish:
      | ((
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo,
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolver: (
            parent: undefined,
            args: ArgsPublish,
            ctx: Context,
            info: GraphQLResolveInfo,
          ) => Post | null | Promise<Post | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
}
